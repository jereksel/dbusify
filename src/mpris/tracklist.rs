// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

#![allow(dead_code)]
use dbus as dbus;
use dbus::arg;
use dbus::tree;

pub trait OrgMprisMediaPlayer2TrackList {
    type Err;
    fn get_tracks_metadata(&self, track_ids: Vec<dbus::Path>) -> Result<Vec<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>>, Self::Err>;
    fn add_track(&self, uri: &str, after_track: dbus::Path, set_as_current: bool) -> Result<(), Self::Err>;
    fn remove_track(&self, track_id: dbus::Path) -> Result<(), Self::Err>;
    fn go_to(&self, track_id: dbus::Path) -> Result<(), Self::Err>;
    fn get_tracks(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_can_edit_tracks(&self) -> Result<bool, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgMprisMediaPlayer2TrackList for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn get_tracks_metadata(&self, track_ids: Vec<dbus::Path>) -> Result<Vec<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"GetTracksMetadata".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(track_ids);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let metadata: Vec<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>> = try!(i.read());
        Ok(metadata)
    }

    fn add_track(&self, uri: &str, after_track: dbus::Path, set_as_current: bool) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"AddTrack".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(uri);
            i.append(after_track);
            i.append(set_as_current);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn remove_track(&self, track_id: dbus::Path) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"RemoveTrack".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(track_id);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn go_to(&self, track_id: dbus::Path) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"GoTo".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(track_id);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_tracks(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.TrackList", "Tracks")
    }

    fn get_can_edit_tracks(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.TrackList", "CanEditTracks")
    }
}

pub fn org_mpris_media_player2_track_list_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgMprisMediaPlayer2TrackList<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.mpris.MediaPlayer2.TrackList", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let track_ids: Vec<dbus::Path> = try!(i.read());
        let d = fclone(minfo);
        let metadata = try!(d.get_tracks_metadata(track_ids));
        let rm = minfo.msg.method_return();
        let rm = rm.append1(metadata);
        Ok(vec!(rm))
    };
    let m = factory.method("GetTracksMetadata", Default::default(), h);
    let m = m.in_arg(("TrackIds", "ao"));
    let m = m.out_arg(("Metadata", "aa{sv}"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let uri: &str = try!(i.read());
        let after_track: dbus::Path = try!(i.read());
        let set_as_current: bool = try!(i.read());
        let d = fclone(minfo);
        try!(d.add_track(uri, after_track, set_as_current));
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("AddTrack", Default::default(), h);
    let m = m.in_arg(("Uri", "s"));
    let m = m.in_arg(("AfterTrack", "o"));
    let m = m.in_arg(("SetAsCurrent", "b"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let track_id: dbus::Path = try!(i.read());
        let d = fclone(minfo);
        try!(d.remove_track(track_id));
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("RemoveTrack", Default::default(), h);
    let m = m.in_arg(("TrackId", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let track_id: dbus::Path = try!(i.read());
        let d = fclone(minfo);
        try!(d.go_to(track_id));
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("GoTo", Default::default(), h);
    let m = m.in_arg(("TrackId", "o"));
    let i = i.add_m(m);

    let p = factory.property::<Vec<dbus::Path>, _>("Tracks", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_tracks()));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanEditTracks", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_can_edit_tracks()));
        Ok(())
    });
    let i = i.add_p(p);
    i
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackListReplaced {
    pub tracks: Vec<dbus::Path<'static>>,
    pub current_track: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackListReplaced {
    const NAME: &'static str = "TrackListReplaced";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.tracks as &arg::RefArg).append(i);
        (&self.current_track as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.tracks = try!(i.read());
        self.current_track = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackAdded {
    pub metadata: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>,
    pub after_track: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackAdded {
    const NAME: &'static str = "TrackAdded";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.metadata as &arg::RefArg).append(i);
        (&self.after_track as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.metadata = try!(i.read());
        self.after_track = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackRemoved {
    pub track_id: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackRemoved {
    const NAME: &'static str = "TrackRemoved";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.track_id as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.track_id = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    pub track_id: dbus::Path<'static>,
    pub metadata: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    const NAME: &'static str = "TrackMetadataChanged";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.track_id as &arg::RefArg).append(i);
        (&self.metadata as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.track_id = try!(i.read());
        self.metadata = try!(i.read());
        Ok(())
    }
}
