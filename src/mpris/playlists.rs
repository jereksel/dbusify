// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

#![allow(dead_code)]
use dbus as dbus;
use dbus::arg;
use dbus::tree;

pub trait OrgMprisMediaPlayer2Playlists {
    type Err;
    fn activate_playlist(&self, playlist_id: dbus::Path) -> Result<(), Self::Err>;
    fn get_playlists(&self, index: u32, max_count: u32, order: &str, reverse_order: bool) -> Result<Vec<(dbus::Path<'static>, String, String)>, Self::Err>;
    fn get_playlist_count(&self) -> Result<u32, Self::Err>;
    fn get_orderings(&self) -> Result<Vec<String>, Self::Err>;
    fn get_active_playlist(&self) -> Result<(bool, (dbus::Path<'static>, String, String)), Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgMprisMediaPlayer2Playlists for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn activate_playlist(&self, playlist_id: dbus::Path) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.mpris.MediaPlayer2.Playlists".into(), &"ActivatePlaylist".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(playlist_id);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn get_playlists(&self, index: u32, max_count: u32, order: &str, reverse_order: bool) -> Result<Vec<(dbus::Path<'static>, String, String)>, Self::Err> {
        let mut m = self.method_call_with_args(&"org.mpris.MediaPlayer2.Playlists".into(), &"GetPlaylists".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(index);
            i.append(max_count);
            i.append(order);
            i.append(reverse_order);
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let playlists: Vec<(dbus::Path<'static>, String, String)> = i.read()?;
        Ok(playlists)
    }

    fn get_playlist_count(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.Playlists", "PlaylistCount")
    }

    fn get_orderings(&self) -> Result<Vec<String>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.Playlists", "Orderings")
    }

    fn get_active_playlist(&self) -> Result<(bool, (dbus::Path<'static>, String, String)), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.Playlists", "ActivePlaylist")
    }
}

pub fn org_mpris_media_player2_playlists_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    D::Signal: Default,
    T: OrgMprisMediaPlayer2Playlists<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.mpris.MediaPlayer2.Playlists", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let playlist_id: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.activate_playlist(playlist_id)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("ActivatePlaylist", Default::default(), h);
    let m = m.in_arg(("PlaylistId", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let index: u32 = i.read()?;
        let max_count: u32 = i.read()?;
        let order: &str = i.read()?;
        let reverse_order: bool = i.read()?;
        let d = fclone(minfo);
        let playlists = d.get_playlists(index, max_count, order, reverse_order)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(playlists);
        Ok(vec!(rm))
    };
    let m = factory.method("GetPlaylists", Default::default(), h);
    let m = m.in_arg(("Index", "u"));
    let m = m.in_arg(("MaxCount", "u"));
    let m = m.in_arg(("Order", "s"));
    let m = m.in_arg(("ReverseOrder", "b"));
    let m = m.out_arg(("Playlists", "a(oss)"));
    let i = i.add_m(m);

    let p = factory.property::<u32, _>("PlaylistCount", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.get_playlist_count()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<&str>, _>("Orderings", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.get_orderings()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<(bool, (dbus::Path, &str, &str)), _>("ActivePlaylist", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.get_active_playlist()?);
        Ok(())
    });
    let i = i.add_p(p);
    let s = factory.signal("PlaylistChanged", Default::default());
    let s = s.arg(("Playlist", "(oss)"));
    let i = i.add_s(s);
    i
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    pub playlist: (dbus::Path<'static>, String, String),
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    const NAME: &'static str = "PlaylistChanged";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.Playlists";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.playlist, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.playlist = i.read()?;
        Ok(())
    }
}
